import { useState } from 'react'
import { motion } from 'framer-motion'
import { Line, Doughnut } from 'react-chartjs-2'
import Chart from 'chart.js/auto'
import { userDashboardData } from '../data/userDashboardData'

const Dashboard = () => {
  const [selectedTimeFrame, setSelectedTimeFrame] = useState('daily')
  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  
  // Prepare chart data
  const moodTrendsData = {
    labels: days,
    datasets: [
      {
        label: 'Mood Score',
        data: userDashboardData.weeklyProgress.moodScores,
        borderColor: '#5AC8FA',
        backgroundColor: 'rgba(90, 200, 250, 0.1)',
        tension: 0.4,
        fill: true,
      },
      {
        label: 'Emotional Balance',
        data: userDashboardData.weeklyProgress.emotionalBalance,
        borderColor: '#FFB703',
        backgroundColor: 'rgba(255, 183, 3, 0.1)',
        tension: 0.4,
        fill: true,
      }
    ]
  }

  const emotionDistributionData = {
    labels: userDashboardData.emotionalJourney.dominantEmotions.map(item => item.emotion),
    datasets: [{
      data: userDashboardData.emotionalJourney.dominantEmotions.map(item => item.percentage),
      backgroundColor: userDashboardData.emotionalJourney.dominantEmotions.map(item => item.color),
      borderColor: 'rgba(255, 255, 255, 0.5)',
      borderWidth: 2,
    }]
  }

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: 'bottom',
        labels: {
          color: '#64748B',
          font: {
            size: 12,
            weight: '500',
          },
          padding: 20,
        },
      },
      tooltip: {
        backgroundColor: 'rgba(255, 255, 255, 0.9)',
        titleColor: '#1E293B',
        bodyColor: '#64748B',
        borderColor: '#E2E8F0',
        borderWidth: 1,
        cornerRadius: 12,
        padding: 12,
      },
    },
    scales: {
      x: {
        grid: {
          display: false,
        },
        ticks: {
          color: '#64748B',
          font: {
            size: 12,
            weight: '500',
          },
        },
      },
      y: {
        beginAtZero: true,
        max: 100,
        grid: {
          color: 'rgba(100, 116, 139, 0.1)',
          drawBorder: false,
        },
        ticks: {
          color: '#64748B',
          font: {
            size: 12,
            weight: '500',
          },
        },
      },
    },
  }

  return (
    <motion.div 
      className="max-w-7xl mx-auto px-6 lg:px-8 py-8"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
    >
      {/* Header */}
      <motion.div 
        className="text-center mb-12"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
      >
        <h1 className="text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-light-text to-light-primary dark:from-dark-text dark:to-dark-primary bg-clip-text text-transparent">
          Your Wellness Journey
        </h1>
        <p className="text-lg text-light-muted dark:text-dark-muted">
          {userDashboardData.personalMetrics.currentStreak} day streak ‚Ä¢ {userDashboardData.personalMetrics.totalPlayTime} total playtime
        </p>
      </motion.div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Progress Chart */}
        <motion.div 
          className="card-premium dark:card-premium-dark p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-light-text dark:text-dark-text mb-2">
                Weekly Progress
              </h2>
              <p className="text-light-muted dark:text-dark-muted">
                Your emotional journey this week
              </p>
            </div>
            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-light-primary to-light-accent dark:from-dark-primary dark:to-dark-accent flex items-center justify-center shadow-lg">
              <span className="text-2xl">üìà</span>
            </div>
          </div>
          
          <div className="h-80 mb-6">
            <Line data={moodTrendsData} options={chartOptions} />
          </div>

          <div className="grid grid-cols-3 gap-4">
            {Object.entries(userDashboardData.personalMetrics).map(([key, value], index) => (
              <div 
                key={key}
                className="text-center p-4 rounded-2xl bg-gradient-to-br from-light-primary/10 to-light-accent/10 dark:from-dark-primary/10 dark:to-dark-accent/10"
              >
                <div className="text-2xl font-bold text-light-primary dark:text-dark-primary">
                  {value}
                </div>
                <div className="text-sm text-light-muted dark:text-dark-muted">
                  {key.replace(/([A-Z])/g, ' $1').trim()}
                </div>
              </div>
            ))}
          </div>
        </motion.div>

        {/* Recent Activities */}
        <motion.div 
          className="card-premium dark:card-premium-dark p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-light-text dark:text-dark-text mb-2">
                Recent Activities
              </h2>
              <p className="text-light-muted dark:text-dark-muted">
                Your latest gaming sessions
              </p>
            </div>
            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-light-accent to-light-primary dark:from-dark-accent dark:to-dark-primary flex items-center justify-center shadow-lg">
              <span className="text-2xl">üéÆ</span>
            </div>
          </div>

          <div className="space-y-4">
            {userDashboardData.recentActivities.map((activity, index) => (
              <motion.div 
                key={index}
                className="p-4 rounded-xl bg-gradient-to-r from-light-primary/5 to-light-accent/5 dark:from-dark-primary/5 dark:to-dark-accent/5 border border-light-primary/10 dark:border-dark-primary/10"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 + index * 0.1 }}
              >
                <div className="flex justify-between items-center mb-2">
                  <h4 className="font-semibold text-light-text dark:text-dark-text">
                    {activity.activity}
                  </h4>
                  <span className="text-light-primary dark:text-dark-primary">
                    {activity.score}%
                  </span>
                </div>
                <div className="flex justify-between text-sm text-light-muted dark:text-dark-muted">
                  <span>{activity.duration} ‚Ä¢ {activity.mood}</span>
                  <span>{new Date(activity.date).toLocaleDateString()}</span>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Emotional Journey */}
        <motion.div 
          className="card-premium dark:card-premium-dark p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-light-text dark:text-dark-text mb-2">
                Emotional Journey
              </h2>
              <p className="text-light-muted dark:text-dark-muted">
                Your dominant emotions
              </p>
            </div>
            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-light-primary to-light-accent dark:from-dark-primary dark:to-dark-accent flex items-center justify-center shadow-lg">
              <span className="text-2xl">üí´</span>
            </div>
          </div>

          <div className="h-64 mb-6">
            <Doughnut data={emotionDistributionData} options={chartOptions} />
          </div>
        </motion.div>

        {/* Achievement Progress */}
        <motion.div 
          className="card-premium dark:card-premium-dark p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
        >
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-light-text dark:text-dark-text mb-2">
                Achievement Progress
              </h2>
              <p className="text-light-muted dark:text-dark-muted">
                Your ongoing achievements
              </p>
            </div>
            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-light-accent to-light-primary dark:from-dark-accent dark:to-dark-primary flex items-center justify-center shadow-lg">
              <span className="text-2xl">üèÜ</span>
            </div>
          </div>

          <div className="space-y-6">
            {userDashboardData.achievements.progress.map((achievement, index) => (
              <motion.div 
                key={achievement.name}
                className="space-y-2"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.7 + index * 0.1 }}
              >
                <div className="flex justify-between items-center">
                  <h4 className="font-semibold text-light-text dark:text-dark-text">
                    {achievement.name}
                  </h4>
                  <span className="text-light-primary dark:text-dark-primary">
                    {achievement.current}/{achievement.target}
                  </span>
                </div>
                <p className="text-sm text-light-muted dark:text-dark-muted">
                  {achievement.description}
                </p>
                <div className="relative h-2 bg-light-primary/10 dark:bg-dark-primary/10 rounded-full overflow-hidden">
                  <motion.div
                    className="absolute left-0 top-0 h-full bg-light-primary dark:bg-dark-primary rounded-full"
                    initial={{ width: 0 }}
                    animate={{ width: `${(achievement.current / achievement.target) * 100}%` }}
                    transition={{ duration: 1, delay: 0.8 + index * 0.1 }}
                  />
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>
    </motion.div>
  )
}

export default Dashboard